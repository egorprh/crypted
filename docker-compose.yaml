version: '3.8'

services:
  postgressql:
    container_name: postgressql
    image: postgres:12
    environment:
      POSTGRES_PASSWORD: $DB_PASS
      POSTGRES_USER: $DB_USER
      POSTGRES_DB: $DB_NAME
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $DB_USER -d $DB_NAME"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: always
    ports:
      - 5432:5432
    env_file:
      - ".env"
    networks:
      - web
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql

  # pgadmin:
  #   container_name: pgadmin
  #   image: dpage/pgadmin4:9.2
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: "$PGADMIN_DEFAULT_EMAIL"
  #     PGADMIN_DEFAULT_PASSWORD: "$PGADMIN_DEFAULT_PASSWORD"
  #     PGADMIN_CONFIG_SERVER_MODE: "False"
  #   volumes:
  #     - ./pgadmin-data:/var/lib/pgadmin
  #   ports:
  #     - "5050:80"
  #   restart: unless-stopped
  #   depends_on:
  #     - postgressql
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.5'
  #         memory: 1G
  #   networks:
  #     - web

  backend:
    container_name: fastapi_app
    build:
      context: .
      dockerfile: Dockerfile
    command: uvicorn main:app --reload --host 0.0.0.0 --port 8000
    restart: always
    networks:
      - web
    # ports:
    #   - 8000:8000
    env_file:
      - ".env"
    volumes:
      - ./backend:/app
      - ./frontend/dist:/frontend/dist
      - ./logs:/app/logs
    depends_on:
      postgressql:
        condition: service_healthy
    expose:
      - "8000"

  telegram-bot:
    build:
      context: .
      dockerfile: telegram_bot/Dockerfile.bot
    volumes:
      - ./telegram_bot:/app
    env_file:
      - ".env"
    environment:
      BOT_TOKEN: $BOT_TOKEN
      ADMINS: $ADMINS
      PRIVATE_CHANNEL_ID: $PRIVATE_CHANNEL_ID
    depends_on:
      - backend

  nginx:
    image: nginx:alpine
    container_name: nginx_proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./frontend/dist:/var/www/deptspace.prhdevs.ru/html:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro  # если используешь certbot
    depends_on:
      - backend
    networks:
      - web

networks:
  web:
    driver: bridge


# https://habr.com/ru/companies/ruvds/articles/450312/
# https://habr.com/ru/articles/578744/
# docker-compose build --no-cache

