"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
"""

import asyncio
import aiohttp

from typing import Dict
from config import load_config
from logger import logger


async def send_survey_to_crm(user: Dict, survey_data: list, level: Dict):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ CRM —á–µ—Ä–µ–∑ webhook.
    
    Args:
        user: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        survey_data: –°–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ–ø—Ä–æ—Å–∞
        level: –î–∞–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = load_config("../.env")
        
        if not config.misc.crm_webhook_url:
            logger.warning("CRM webhook URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ CRM")
            return
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–∞
        logger.info(f"–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–∞: {survey_data}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–º–µ–Ω–∏, –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ survey_data
        def extract_answer(keywords):
            for item in survey_data:
                q = str(item.get("question", "")).lower()
                if any(k in q for k in keywords):
                    return item.get("answer")
            return None

        name_value = extract_answer(["–∏–º—è", "–∫–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç", "—Ñ–∞–º–∏–ª–∏—è", "—Ñ–∏–æ", "name"])
        age_value = extract_answer(["–≤–æ–∑—Ä–∞—Å—Ç", "–ª–µ—Ç", "age"])
        phone_value = extract_answer(["—Ç–µ–ª–µ—Ñ–æ–Ω", "phone", "–Ω–æ–º–µ—Ä"])

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–ª–æ—Å–∫–∏–π payload —Å —Ç—Ä–µ–±—É–µ–º—ã–º–∏ –∫–ª—é—á–∞–º–∏
        payload = {
            "telegram_id": user["telegram_id"],
            "username": user.get("username"),
            "level_id": level["id"],
            "level_short_name": level["short_name"],
            "level": level["name"],
            "name": name_value,
            "age": age_value,
            "phone": phone_value
        }
        
        # –õ–æ–≥–∏—Ä—É–µ–º payload –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ CRM payload: {payload}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å –≤ CRM
        async with aiohttp.ClientSession() as session:
            response = await session.post(
                config.misc.crm_webhook_url,
                json=payload,
                headers={"Content-Type": "application/json"},
                timeout=aiohttp.ClientTimeout(total=30)
            )
            if response.status == 200:
                response_text = await response.text()
                logger.info(f"–î–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ CRM –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['telegram_id']}")
                logger.info(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ CRM: {response_text}")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ CRM: —Å—Ç–∞—Ç—É—Å {response.status}, –æ—Ç–≤–µ—Ç: {await response.text()}")
                    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤ CRM: {e}")
        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ CRM


async def send_homework_notification(user: dict, quiz_id: int, course_id: int, answers: list, db):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è.
    
    –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –∫–∞–Ω–∞–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–º,
    —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ, –≤–∫–ª—é—á–∞—è –≤—Å–µ –µ–≥–æ –æ—Ç–≤–µ—Ç—ã (—Ç–µ—Å—Ç–æ–≤—ã–µ –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ).
    
    Args:
        user: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–æ–¥–µ—Ä–∂–∏—Ç id, name, telegram_id)
        quiz_id: ID —Ç–µ—Å—Ç–∞/–∑–∞–¥–∞–Ω–∏—è
        course_id: ID –∫—É—Ä—Å–∞
        answers: –°–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å answerId –∏/–∏–ª–∏ answerText)
        db: –û–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–æ–≤
    
    Returns:
        None (—Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)
    
    Raises:
        Exception: –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    """
    try:
        # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ –∏ —É—Ä–æ–∫–µ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º JOIN –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –∫—É—Ä—Å–∞ –∏ —É—Ä–æ–∫–∞ –ø–æ ID —Ç–µ—Å—Ç–∞
        course_info = await db.get_records_sql("""
            SELECT c.title FROM courses c 
            JOIN lessons l ON c.id = l.course_id 
            JOIN quizzes q ON l.id = q.lesson_id 
            WHERE q.id = $1
        """, quiz_id)
        
        lesson_info = await db.get_records_sql("""
            SELECT l.title FROM lessons l 
            JOIN quizzes q ON l.id = q.lesson_id 
            WHERE q.id = $1
        """, quiz_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ –∏ —É—Ä–æ–∫–µ
        if not course_info or not lesson_info:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ/—É—Ä–æ–∫–µ –¥–ª—è quiz_id {quiz_id}")
            return
        
        course_title = course_info[0]["title"]
        lesson_title = lesson_info[0]["title"]
        
        # –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–æ–≤
        # –ö—ç—à–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç—ã –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î
        question_texts = {}
        correct_answers_count = 0
        
        for answer in answers:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏ —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞
            question = await db.get_records_sql("""
                SELECT q.text, q.type FROM questions q 
                JOIN quiz_questions qq ON q.id = qq.question_id 
                WHERE qq.id = $1
            """, answer["questionId"])
            if question:
                question_texts[answer["questionId"]] = {
                    'text': question[0]["text"],
                    'type': question[0]["type"]
                }
        
        # –®–∞–≥ 3: –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        message = f"üìö –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.get('username', user.get('id'))} –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ –≤ –∫—É—Ä—Å–µ \"{course_title}\"\n"
        message += f"–£—Ä–æ–∫: {lesson_title}\n\n"
        message += "‚úçÔ∏è –û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
        
        # –®–∞–≥ 4: –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
        for i, answer in enumerate(answers, 1):
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            question_info = question_texts.get(answer["questionId"], {'text': f"–í–æ–ø—Ä–æ—Å {answer['questionId']}", 'type': 'quiz'})
            question_text = question_info['text']
            question_type = question_info['type']
            
            message += f"{i}. {question_text}\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if "answerText" in answer and answer["answerText"]:
                # –≠—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç (–ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
                message += f"   –û—Ç–≤–µ—Ç: {answer['answerText']}\n"
                # –¢–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –≤—Å–µ–≥–¥–∞ —Å—á–∏—Ç–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏
                message += "   –ü—Ä–∞–≤–∏–ª—å–Ω–æ: ‚úÖ\n"
                correct_answers_count += 1
            else:
                # –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç - –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å
                answer_text = await db.get_records_sql("""
                    SELECT a.text, a.correct FROM answers a WHERE a.id = $1
                """, answer.get("answerId", 0))
                if answer_text:
                    message += f"   –û—Ç–≤–µ—Ç: {answer_text[0]['text']}\n"
                    is_correct = answer_text[0].get('correct', False)
                    message += f"   –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {'‚úÖ' if is_correct else '‚ùå'}\n"
                    if is_correct:
                        correct_answers_count += 1
            
            message += "\n"
        
        # –®–∞–≥ 5: –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_questions = len(answers)
        progress_percent = (correct_answers_count / total_questions) * 100 if total_questions > 0 else 0
        
        message += f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        message += f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_answers_count}/{total_questions}\n"
        message += f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_percent:.1f}%"
        
        # –®–∞–≥ 6: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –∫–∞–Ω–∞–ª
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        from notification_service import send_service_message
        
        # –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ Telegram
        # Telegram –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ 4096 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç HTML —Ç–µ–≥–∏
        from db.pgapi import sanitize_input
        cleaned_message = sanitize_input(message, max_length=4096)
        
        await send_service_message(cleaned_message)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['id']}")
        
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏
        # –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {e}")


def remove_timestamps(data):
    """
    –£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—á–∏—Å—Ç–∫–∏.
    
    Args:
        data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        
    Returns:
        –û—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
    """
    # –°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
    timestamp_fields = ['created_at', 'updated_at', 'time_created', 'time_modified']
    
    if isinstance(data, dict):
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
        cleaned_data = {}
        removed_fields = []
        
        for k, v in data.items():
            if k in timestamp_fields:
                removed_fields.append(k)
            else:
                cleaned_data[k] = remove_timestamps(v)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã)
        # if removed_fields:
        #     logger.debug(f"–£–¥–∞–ª–µ–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏: {removed_fields}")
            
        return cleaned_data
    elif isinstance(data, list):
        return [remove_timestamps(item) for item in data]
    else:
        return data


async def get_previous_lesson(course_id: int, current_sort_order: int, db) -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–π —É—Ä–æ–∫ –ø–æ –ø–æ—Ä—è–¥–∫—É —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.
    
    Args:
        course_id: ID –∫—É—Ä—Å–∞
        current_sort_order: –¢–µ–∫—É—â–∏–π –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        db: –û–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    
    Returns:
        dict: –î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —É—Ä–æ–∫–∞ –∏–ª–∏ None –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —É—Ä–æ–∫ —Å –º–µ–Ω—å—à–∏–º sort_order
        previous_lessons = await db.get_records_sql(
            "SELECT * FROM lessons WHERE course_id = $1 AND visible = $2 AND sort_order < $3 ORDER BY sort_order DESC LIMIT 1",
            course_id, True, current_sort_order
        )
        
        return previous_lessons[0] if previous_lessons else None
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —É—Ä–æ–∫–∞ –¥–ª—è –∫—É—Ä—Å–∞ {course_id}, sort_order {current_sort_order}: {e}")
        return None


async def check_lesson_blocked(user_id: int, lesson: dict, course: dict, db) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ —É—Ä–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    –õ–æ–≥–∏–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:
    1. –ï—Å–ª–∏ completion_on = False, —É—Ä–æ–∫ –≤—Å–µ–≥–¥–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
    2. –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫ (sort_order = 1), —É—Ä–æ–∫ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
    3. –ò–Ω–∞—á–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —É—Ä–æ–∫–∞:
       - –ï—Å–ª–∏ —É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —É—Ä–æ–∫–∞ –µ—Å—Ç—å –∑–∞–¥–∞–Ω–∏—è: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ (quiz_attempt)
       - –ï—Å–ª–∏ —É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —É—Ä–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –ø—Ä–æ—Å–º–æ—Ç—Ä (lesson_viewed)
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lesson: –î–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞
        course: –î–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–∞
        db: –û–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    
    Returns:
        bool: True –µ—Å–ª–∏ —É—Ä–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, False –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        if not course.get("completion_on", False):
            return False
        
        # –ü–µ—Ä–≤—ã–π —É—Ä–æ–∫ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω
        if lesson.get("sort_order", 0) == 1:
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —É—Ä–æ–∫
        previous_lesson = await get_previous_lesson(course["id"], lesson["sort_order"], db)
        if not previous_lesson:
            # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —É—Ä–æ–∫–∞ –Ω–µ—Ç, —Å—á–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–º
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —É—Ä–æ–∫–∞
        is_previous_completed = await is_lesson_completed_by_user(user_id, previous_lesson["id"], db)
        
        # –£—Ä–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω
        return not is_previous_completed
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —É—Ä–æ–∫–∞ {lesson.get('id')} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False


async def mark_lesson_completed(user_id: int, lesson_id: int, db):
    """
    –û—Ç–º–µ—á–∞–µ—Ç —É—Ä–æ–∫ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lesson_id: ID —É—Ä–æ–∫–∞
        db: –û–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        existing_completion = await db.get_records_sql(
            "SELECT id FROM lesson_completions WHERE user_id = $1 AND lesson_id = $2",
            user_id, lesson_id
        )
        
        if not existing_completion:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            params = {
                "user_id": user_id,
                "lesson_id": lesson_id
            }
            await db.insert_record('lesson_completions', params)
            logger.info(f"–£—Ä–æ–∫ {lesson_id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
        else:
            logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Ä–æ–∫–∞ {lesson_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–∞ {lesson_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")


async def is_lesson_completed_by_user(user_id: int, lesson_id: int, db) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ —É—Ä–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    
    –õ–æ–≥–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:
    - –ï—Å–ª–∏ —É —É—Ä–æ–∫–∞ –µ—Å—Ç—å –∑–∞–¥–∞–Ω–∏—è (—Ç–µ—Å—Ç—ã): —É—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞
    - –ï—Å–ª–∏ —É —É—Ä–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π: —É—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lesson_id: ID —É—Ä–æ–∫–∞
        db: –û–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    
    Returns:
        bool: True –µ—Å–ª–∏ —É—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —É—Ä–æ–∫–∞ –∑–∞–¥–∞–Ω–∏—è
        quizzes = await db.get_records_sql(
            "SELECT id FROM quizzes WHERE lesson_id = $1 AND visible = $2", 
            lesson_id, True
        )
        
        if quizzes:
            # –£ —É—Ä–æ–∫–∞ –µ—Å—Ç—å –∑–∞–¥–∞–Ω–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
            # –í —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–µ: –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –≤ lesson_completions, –∑–Ω–∞—á–∏—Ç —Ç–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω
            quiz_attempts = await db.get_records_sql(
                "SELECT id FROM lesson_completions WHERE user_id = $1 AND lesson_id = $2",
                user_id, lesson_id
            )
            return len(quiz_attempts) > 0
        else:
            # –£ —É—Ä–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä
            viewed_records = await db.get_records_sql(
                "SELECT id FROM lesson_completions WHERE user_id = $1 AND lesson_id = $2",
                user_id, lesson_id
            )
            return len(viewed_records) > 0
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–∞ {lesson_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False


async def check_enter_survey_completion(user_id: int, db) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–æ—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Ö–æ–¥–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤—Ö–æ–¥–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞
    –≤ —Ç–∞–±–ª–∏—Ü–µ user_answers, –∞ –Ω–µ –ª–æ–≥–∏ –≤ user_actions_log.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db: –û–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    
    Returns:
        bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—à–µ–ª –≤—Ö–æ–¥–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –≤—Ö–æ–¥–Ω–æ–π –æ–ø—Ä–æ—Å
        enter_survey = await db.get_records_sql(
            "SELECT id FROM surveys WHERE visible = $1 LIMIT 1", 
            True
        )
        
        if not enter_survey:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–π–¥–µ–Ω–æ
            return True
        
        survey_id = enter_survey[0]["id"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤—Ö–æ–¥–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞
        user_survey_answers = await db.get_records_sql("""
            SELECT COUNT(*) as answer_count 
            FROM user_answers ua
            JOIN survey_questions sq ON ua.instance_qid = sq.id
            WHERE ua.user_id = $1 AND ua.type = 'survey' AND sq.survey_id = $2
        """, user_id, survey_id)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ–ø—Ä–æ—Å–∞, —Å—á–∏—Ç–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–º
        return user_survey_answers[0]["answer_count"] > 0
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ
        return False
