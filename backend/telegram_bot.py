import asyncio
from aiogram import Bot, Dispatcher, types
from dotenv import load_dotenv
import os
import json

load_dotenv('./.env')  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot_token = os.getenv("BOT_TOKEN")
user_ids = os.getenv("ADMINS").split(',')

bot = Bot(token=bot_token)
dp = Dispatcher()

async def send_service_message(data: dict):
    formatted_json = json.dumps(data, indent=4, ensure_ascii=False)

    for user_id in user_ids:
        try:
            await bot.send_message(
                chat_id=int(user_id),
                text=f"<b>–°–µ—Ä–≤–∏—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n<pre>{formatted_json}</pre>",
                parse_mode=types.ParseMode.HTML
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


async def main():
    try:
        print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
