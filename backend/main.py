import asyncio
import os
import time
import traceback
from datetime import datetime, timedelta
from fastapi import FastAPI, HTTPException, Request
from fastapi.exception_handlers import http_exception_handler
from fastapi.responses import JSONResponse, RedirectResponse
from starlette.exceptions import HTTPException as StarletteHTTPException
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse
from contextlib import asynccontextmanager
from typing import Any, AsyncGenerator, Dict
from db.pgapi import PGApi
from notification_service import send_service_message, send_service_document
from config import load_config
import json
from logger import logger  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–ø–∏—Å—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –∫—É—Ä—Å—ã
from enrollment import create_user_enrollment, get_course_access_info
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
from misc import send_survey_to_crm, remove_timestamps

# –ò–º–ø–æ—Ä—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∫–∏
from admin.admin_setup import setup_admin


db = PGApi()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
request_timestamps: Dict[str, float] = {}

# –§–ª–∞–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
db_connected = False

def check_db_connection():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –ª–∏ –ë–î"""
    return db_connected


async def daily_db_backup():
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–º–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑ –≤ –¥–µ–Ω—å.
    –°–æ–∑–¥–∞–µ—Ç —Å–∂–∞—Ç—ã–π –∞—Ä—Ö–∏–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ Telegram –∫–∞–Ω–∞–ª.
    """
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config("../.env")
    
    while True:
        try:
            logger.info("–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–º–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
            
            # –°–æ–∑–¥–∞–µ–º –¥–∞–º–ø –∏ –ø–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∞—Ä—Ö–∏–≤—É
            archive_path = await db.create_db_dump()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Ä—Ö–∏–≤ –≤ Telegram –∫–∞–Ω–∞–ª
            if archive_path and os.path.exists(archive_path):
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞
                    archive_size = os.path.getsize(archive_path)
                    archive_size_mb = archive_size / (1024 * 1024)
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                    message = f"üì¶ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–º–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
                    message += f"üìÖ –î–∞—Ç–∞: {timestamp}\n"
                    message += f"üìä –†–∞–∑–º–µ—Ä: {archive_size_mb:.2f} MB\n"
                    message += f"‚úÖ –°—Ç–∞—Ç—É—Å: –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω"
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await send_service_message(message)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∞—Ä—Ö–∏–≤–∞
                    await send_service_document(
                        archive_path,
                        f"üóÑÔ∏è –î–∞–º–ø –ë–î –æ—Ç {timestamp}"
                    )
                    
                    logger.info(f"–ê—Ä—Ö–∏–≤ –¥–∞–º–ø–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª: {archive_path}")
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—Ä—Ö–∏–≤–∞ –≤ Telegram: {e}")
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                    error_message = f"‚ùå <b>–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–º–ø–∞</b>\n\n–î–∞–º–ø —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª.\n–û—à–∏–±–∫–∞: {str(e)}"
                    await send_service_message(error_message)
            
            logger.info("–î–∞–º–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–º–ø—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è)
            try:
                await db.cleanup_old_dumps(keep_days=3)
            except Exception as cleanup_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –¥–∞–º–ø–æ–≤: {cleanup_error}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∞–º–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            try:
                error_message = f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–º–ø–∞ –ë–î</b>\n\n–û—à–∏–±–∫–∞: {str(e)}"
                await send_service_message(error_message)
            except Exception as send_error:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {send_error}")
        
        # –û–∂–∏–¥–∞–µ–º 24 —á–∞—Å–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
        await asyncio.sleep(24*60*60)


# https://medium.com/@marcnealer/fastapi-after-the-getting-started-867ecaa99de9
@asynccontextmanager
async def lifespan(app: FastAPI):
    # app startup
    max_retries = 3  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    retry_delay = 2  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    
    global db_connected
    db_connected = False
    attempt = 0
    while attempt < max_retries:
        try:
            await db.create()  # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            db_connected = True
            # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ë–î –ø–æ–¥–∫–ª—é—á–µ–Ω–∞
            asyncio.create_task(daily_db_backup())
            logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –ë–î")
            break  # –ï—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
        except Exception as e:
            attempt += 1
            if attempt == max_retries:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫. –û—à–∏–±–∫–∞: {e}")
                logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
                break  # –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt} –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(retry_delay)  # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π

    await send_service_message("DeptSpace –∑–∞–ø—É—â–µ–Ω! –°–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î: " + ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∞" if db_connected else "–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞"))

    yield  # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–¥–µ—Å—å
    logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    await send_service_message("DeptSpace –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ")
    
    # app teardown
    if db_connected:
        try:
            await db.close()  # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        except Exception as e:
            logger.info(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")



#https://habr.com/ru/articles/799337/
app = FastAPI(lifespan=lifespan)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
setup_admin(app)


async def trigger_event(event_name: str, user_id: int, instance_id: int, data: Any = None):
    """
    –¢—Ä–∏–≥–≥–µ—Ä–∏—Ç —Å–æ–±—ã—Ç–∏–µ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º –∏ –¥–∞–Ω–Ω—ã–º–∏.
    """
    if not check_db_connection():
        logger.warning(f"Database not connected, skipping event: {event_name}")
        return None
    
    params = {
        "user_id": user_id,
        "instance_id": instance_id,
        "action": event_name,
    }
    event_id = await db.insert_record('user_actions_log', params)

    user = await db.get_record("users", {"id": user_id})
    level = await db.get_record("levels", {"id": user["level"]})

    if event_name == 'course_viewed':
        course = await db.get_record("courses", {"id": instance_id})
        text = f"""
        –ü–µ—Ä–µ—Ö–æ–¥ –≤ –∫—É—Ä—Å DSpace!

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user["username"]} ({user["telegram_id"]}) {user["first_name"]} {user["last_name"]} –∑–∞—à–µ–ª –≤ –∫—É—Ä—Å "{course['title']}"
        """
    elif event_name == 'enter_survey':
        formatted_answers = "\n".join([f"<b>{question['question']}</b>: {question['answer']}" for question in data])
        text = f"""
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user["username"]} ({user["telegram_id"]}) {user["first_name"]} {user["last_name"]} –ø—Ä–æ—à–µ–ª –≤—Ö–æ–¥–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ DSpace!

{formatted_answers}
<b>–£—Ä–æ–≤–µ–Ω—å:</b> {level["name"]}
        """
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ CRM
        asyncio.create_task(send_survey_to_crm(user, data, level))
    elif event_name == 'course_completed':
        course = await db.get_record("courses", {"id": instance_id})
        text = f"""
        –ü–µ—Ä–µ—Ö–æ–¥ –≤ –∫—É—Ä—Å DSpace!

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user["username"]} ({user["telegram_id"]}) {user["first_name"]} {user["last_name"]} –ø—Ä–æ—à–µ–ª –≤—Å–µ —Ç–µ—Å—Ç—ã –≤ –∫—É—Ä—Å–µ "{course['title']}"
        """
    
    if text:
        asyncio.create_task(send_service_message(text))

    logger.info(f"Triggered event: {params}")

    return event_id


async def get_user_homeworks_by_course(user_id: int, course_id: int):
    homeworks_sql = f"""
        SELECT 
            up.id, 
            up.quiz_id, 
            up.user_id, 
            up.progress, 
            c.title AS course_title, 
            l.title AS lesson_title
        FROM quiz_attempts up
        LEFT JOIN quizzes q ON up.quiz_id = q.id
        LEFT JOIN lessons l ON q.lesson_id = l.id
        LEFT JOIN courses c ON l.course_id = c.id
        WHERE up.id IN (
            SELECT MAX(up_inner.id)
            FROM quiz_attempts up_inner
            WHERE up_inner.user_id = {user_id}
            GROUP BY up_inner.quiz_id
        )
        AND up.user_id = {user_id} AND c.id = {course_id} ORDER BY up.id DESC;
    """
    return await db.get_records_sql(homeworks_sql)


@app.get("/api/ping")
async def ping():
    return {
        "status": "ok", 
        "message": "Pong",
        "database_connected": check_db_connection()
    }


# C–æ–±—ã—Ç–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫—É—Ä—Å–∞ 
@app.post("/api/save_user")
async def save_user(request: Request):
    if not check_db_connection():
        return {"status": "error", "message": "Database not connected"}
    
    request = await request.json()
    logger.info(f"–ó–∞–ø—Ä–æ—Å /api/save_user: {request}")
    params = {
        "telegram_id": request["telegram_id"],  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
        "username": request.get("username", ""),  # –µ—Å–ª–∏ –Ω–µ—Ç - –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        "first_name": request.get("first_name", ""),  # –µ—Å–ª–∏ –Ω–µ—Ç - –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        "last_name": request.get("last_name", ""),  # –µ—Å–ª–∏ –Ω–µ—Ç - –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    }
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if await db.get_record('users', {'telegram_id': request["telegram_id"]}) is None:
        logger.info(f"–°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {params}")
        await db.insert_record('users', params)


# C–æ–±—ã—Ç–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫—É—Ä—Å–∞ 
@app.post("/api/course_viewed")
async def course_viewed(request: Request):
    if not check_db_connection():
        return {"status": "error", "message": "Database not connected"}
    
    request = await request.json()
    user_id = request["userId"]
    user = await db.get_record("users", {"telegram_id": user_id})
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫—É—Ä—Å –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ
    await create_user_enrollment(db, user["id"], request["courseId"])
    
    asyncio.create_task(trigger_event('course_viewed', user["id"], request["courseId"]))
    return {"status": "success", "message": "Course viewed event triggered."}


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤—Ç–µ–ª—è 
@app.post("/api/save_level")
async def save_level(request: Request):
    if not check_db_connection():
        return {"status": "error", "message": "Database not connected"}
    
    try:
        request = await request.json()
        user_id = request["telegram_id"]
        level = request["level_id"]
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
        user = await db.get_record("users", {"telegram_id": user_id})
        
        if not user:
            return {"status": "error", "message": "User not found"}
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.update_record("users", user["id"], {"level": level})
        
        logger.info(f"User {user['id']} level updated to {level}")
        
        return {"status": "success", "message": "User level was updated"}
        
    except Exception as e:
        logger.error(f"Error updating user level: {e}")
        return {"status": "error", "message": f"Failed to update user level: {str(e)}"}


# C–æ–±—ã—Ç–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫—É—Ä—Å–∞ 
@app.post("/api/submit_enter_survey")
async def submit_enter_survey(request: Request):
    if not check_db_connection():
        return {"status": "error", "message": "Database not connected"}
    
    request = await request.json()
    user_id = request["userId"]
    user = await db.get_record("users", {"telegram_id": user_id})
    #TODO –ü–æ—á–µ–º—É —Å—Ä–∞–∑—É –ø–∞–¥–∞–µ–º, –∞ –Ω–µ –≤ —Ñ–æ–Ω–µ?
    asyncio.create_task(trigger_event('enter_survey', user["id"], request["surveyId"], request["verboseAnswers"]))

    # –ó–∞–ø–∏—Å—ã–≤–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for request_answer in request["formattedAnswers"]:
        params = {
                "user_id": user["id"],
                "instance_qid": request_answer["questionId"],
                "type": 'survey',
                "answer_id": request_answer["answerId"],
                "text": request_answer["text"],
        }
        # –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ insert_record
        await db.insert_record('user_answers', params)

    return {"status": "success", "message": "Survey entered event triggered."}


# —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ç–µ—Å—Ç –∫ —É—Ä–æ–∫—É
@app.post("/api/save_attempt")
async def save_attempt(request: Request):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É UserProgress.
    """
    if not check_db_connection():
        return {"status": "error", "message": "Database not connected"}

    request = await request.json()

    try:
        user_id = request["userId"]
        user = await db.get_record("users", {"telegram_id": user_id})

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
        params = {
            "user_id": user["id"],
            "quiz_id": request["quizId"],
            "progress": request["progress"],
        }
        record_id = await db.insert_record('quiz_attempts', params)

        # –ó–∞–ø–∏—Å—ã–≤–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for request_answer in request["answers"]:
            params = {
                "user_id": user["id"],
                "attempt_id": record_id,
                "instance_qid": request_answer["questionId"],
                "type": 'quiz',
                "answer_id": request_answer["answerId"],
                # "text": request_answer["answer"],
            }
            # –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ insert_record
            await db.insert_record('user_answers', params)

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –î–ó –≤ –∫—É—Ä—Å–µ
        count_homeworks = await db.get_records_sql(
            f"SELECT q.id FROM quizzes q LEFT JOIN lessons l ON q.lesson_id = l.id WHERE l.course_id = {request['courseId']} AND q.visible = True")
        user_homeworks = await get_user_homeworks_by_course(user["id"], request["courseId"])
        
        if len(count_homeworks) == len(user_homeworks):
            asyncio.create_task(trigger_event('course_completed', int(user["id"]), int(request["courseId"])))

        logger.info(f"User {user['id']} completed the quiz {request['quizId']}.")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        return {
            "status": "success",
            "message": f"Progress saved successfully with ID: {record_id}",
            "data": {"id": record_id},
        }

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å logging)
        logger.info(f"Error saving progress: {e}")
        traceback.print_exc()  # –í—ã–≤–æ–¥ –ø–æ–ª–Ω–æ–π —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –æ—à–∏–±–∫–∏

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
        raise HTTPException(status_code=500, detail="Failed to save progress")


@app.get("/api/get_app_data")
async def get_app_data(user_id: int):
    if not check_db_connection():
        # –ï—Å–ª–∏ –ë–î –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
        try:
            with open("backend/app_data.json", "r", encoding="utf-8") as f:
                data = json.load(f)
            logger.info("–í–æ–∑–≤—Ä–∞—â–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ app_data.json (–ë–î –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞)")
            return data
        except FileNotFoundError:
            logger.error("–§–∞–π–ª app_data.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return {"status": "error", "message": "Data file not found and database not connected"}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è app_data.json: {e}")
            return {"status": "error", "message": "Failed to load data"}
    
    user = await db.get_record("users", {"telegram_id": user_id})

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –±–µ—Ä–µ–º —Å–ª—É–∂–µ–±–Ω–æ–≥–æ –≥–æ—Å—Ç—è
    if user is None:
        logger.info(f"--> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –±–µ—Ä–µ–º —Å–ª—É–∂–µ–±–Ω–æ–≥–æ –≥–æ—Å—Ç—è")
        user = await db.get_record("users", {"telegram_id": 0})

    courses = await db.get_records_sql("SELECT * FROM courses WHERE visible = $1 AND level <= $2 ORDER BY sort_order", True, user["level"])
    for course in courses:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç—É–ø–∞ –∏ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫—É—Ä—Å
        access_info = await get_course_access_info(db, user["id"], course["id"])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–ø–∏—Å–∏ –∫ –∫—É—Ä—Å—É
        course["time_left"] = access_info["time_left"]
        course["user_enrolment"] = access_info["user_enrolment"]
        
        lessons = await db.get_records_sql("SELECT * FROM lessons WHERE course_id = $1 AND visible = $2 ORDER BY id", course["id"], True)
        has_home_work = False
        
        for lesson in lessons:
            lesson["materials"] = await db.get_records_sql("SELECT * FROM materials WHERE lesson_id = $1 AND visible = $2 ORDER BY id", lesson["id"], True)
            lesson["quizzes"] = await db.get_records_sql("SELECT * FROM quizzes WHERE lesson_id = $1 AND visible = $2 ORDER BY id", lesson["id"], True)
            for quiz in lesson["quizzes"]:
                has_home_work = True
                quiz["questions"] = await db.get_records_sql(
                    f"""SELECT q.* FROM quiz_questions qq
                    JOIN questions q ON qq.question_id = q.id
                    AND qq.quiz_id = $1 AND q.visible = $2 ORDER BY id""", quiz["id"], True)
                for question in quiz["questions"]:
                    question["answers"] = await db.get_records("answers", {"question_id": question["id"]})

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤ –≤ –∫—É—Ä—Å–µ
        course["lesson_count"] = len(lessons)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–≤–∏–∑—ã –≤ —Å–æ–±—Ä–∞–Ω–Ω–æ–º –º–∞—Å—Å–∏–≤–µ lessons
        course["has_home_work"] = has_home_work        
        course["lessons"] = lessons

    events = await db.get_records_sql("SELECT * FROM events WHERE visible = $1 ORDER BY sort_order", True)

    faq = await db.get_records_sql("SELECT * FROM faq WHERE visible = $1 ORDER BY id", True)

    config = await db.get_records("config")
    config.append({'name': 'user_level', 'value': str(user["level"])})

    levels = await db.get_records("levels")

    homeworks_sql = f"""
        SELECT 
            up.id, 
            up.quiz_id, 
            up.user_id, 
            up.progress, 
            c.title AS course_title, 
            l.title AS lesson_title,
            l.sort_order AS lesson_order,
            c.id AS course_id
        FROM quiz_attempts up
        LEFT JOIN quizzes q ON up.quiz_id = q.id
        LEFT JOIN lessons l ON q.lesson_id = l.id
        LEFT JOIN courses c ON l.course_id = c.id
        WHERE up.id IN (
            SELECT MAX(up_inner.id)
            FROM quiz_attempts up_inner
            WHERE up_inner.user_id = {user["id"]}
            GROUP BY up_inner.quiz_id
        )
        AND up.user_id = {user["id"]} ORDER BY q.id ASC;
    """
    homeworks = await db.get_records_sql(homeworks_sql)
    for homework in homeworks:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤ –≤ –∫—É—Ä—Å–µ
        lesson_count = await db.get_records_sql(
            "SELECT COUNT(*) FROM lessons WHERE course_id = $1 AND visible = $2", 
            homework["course_id"], True
        )
        homework["lesson_count"] = lesson_count[0]["count"] if lesson_count else 0
        
        homework["questions"] = await db.get_records_sql("""
                    SELECT qq.id, q.id AS qid, q.text, q.type FROM quiz_questions qq
                    JOIN questions q ON qq.question_id = q.id
                    AND qq.quiz_id = $1 AND q.visible = $2 ORDER BY qq.id""", homework["quiz_id"], True)
        for question in homework["questions"]:
            question["answers"] = await db.get_records("answers", {"question_id": question["qid"]})
            for answer in question["answers"]:
                # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å
                user_answer = await db.get_records_sql("""
                    SELECT * FROM user_answers 
                    WHERE type = 'quiz' AND user_id = $1 AND instance_qid = $2 AND answer_id = $3 AND attempt_id = $4
                    ORDER BY id DESC LIMIT 1""",
                    user["id"], question["qid"], answer["id"], homework["id"])

                answer["user_answer"] = len(user_answer) != 0

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    data = {
        "courses": courses, 
        "events": events,
        "homework": homeworks,
        "faq": faq,
        "levels": levels,
        "config": config,
        "events_count": len(events) # –≠—Ç–æ –∫–ª—é—á –Ω—É–∂–µ–Ω –¥–ª—è –ø–ª–∞—à–∫–∏ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏–≤–µ–Ω—Ç–æ–≤
    }

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–æ—à–µ–ª –≤—Ö–æ–¥–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    enter_survey = await db.get_records_sql(f"""SELECT * FROM surveys WHERE visible = $1 LIMIT 1""", True)
    user_actions = await db.get_records("user_actions_log", {"user_id": user["id"], "action": "enter_survey"})
    if len(enter_survey) > 0 and len(user_actions) == 0:
        enter_survey = enter_survey[0]
        enter_survey["questions"] = await db.get_records_sql(
                        """SELECT sq.id, q.text, q.type FROM survey_questions sq
                        JOIN questions q ON sq.question_id = q.id
                        AND sq.survey_id = $1 AND q.visible = $2""",
                        enter_survey["id"], True)
        for question in enter_survey["questions"]:
                question["answers"] = await db.get_records("answers", {"question_id": question["id"]})

        data["enter_survey"] = enter_survey

    # –£–¥–∞–ª—è–µ–º –∫–ª—é—á–∏ time_created –∏ time_modified
    data = remove_timestamps(data)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON-—Ñ–∞–π–ª –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    with open("backend/app_data.json", "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

    return data


# –†–æ—É—Ç –¥–ª—è —Ñ–∞–≤–∏–∫–æ–Ω–∞
@app.get("/favicon.ico")
async def favicon():
    return FileResponse(
        os.path.join(os.path.dirname(__file__), "..", "frontend", "dist", "images", "favicon.ico"),
        media_type="image/x-icon"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
@app.exception_handler(StarletteHTTPException)
async def custom_404_handler(request: Request, exc: StarletteHTTPException):
    if exc.status_code == 404:
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        return RedirectResponse(url="/")
    # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å-–∫–æ–¥ –Ω–µ 404, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
    return await http_exception_handler(request, exc)


# Static frontend - –º–æ–Ω—Ç–∏—Ä—É–µ–º –Ω–∞ –∫–æ—Ä–Ω–µ–≤–æ–π –ø—É—Ç—å, –Ω–æ –ø–æ—Å–ª–µ —Ä–æ—É—Ç–æ–≤
app.mount("/", StaticFiles(directory=os.path.join(os.path.dirname(__file__), "..", "frontend", "dist"), html=True), name="static")
