from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ContentType
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.utils.markdown import hcode
import asyncio
import os

API_TOKEN = "–¢–í–û–ô_–¢–û–ö–ï–ù"
BASE_UPLOAD_DIR = "uploads"

bot = Bot(token=API_TOKEN)
dp = Dispatcher()


# --- –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π ---
class UploadStates(StatesGroup):
    waiting_for_folder = State()
    receiving_files = State()


# --- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ---
# @dp.message(Command("start"))
# async def cmd_start(message: Message):
#     await message.answer(
#         "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
#         "–Ø –±–æ—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä.\n"
#         "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /upload."
#     )


# --- –ö–æ–º–∞–Ω–¥–∞ /upload ---
@dp.message(Command("upload"))
async def start_upload(message: Message, state: FSMContext):
    await message.answer("–í –∫–∞–∫—É—é –ø–∞–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª—ã? –í–≤–µ–¥–∏ –∏–º—è –ø–∞–ø–∫–∏:")
    await state.set_state(UploadStates.waiting_for_folder)


# --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∏–º—è –ø–∞–ø–∫–∏ ---
@dp.message(UploadStates.waiting_for_folder)
async def set_folder(message: Message, state: FSMContext):
    folder_name = message.text.strip()
    target_path = os.path.join(BASE_UPLOAD_DIR, folder_name)
    os.makedirs(target_path, exist_ok=True)
    await state.update_data(folder=target_path)
    await message.answer(
        f"–ü–∞–ø–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {hcode(target_path)}.\n"
        f"–û—Ç–ø—Ä–∞–≤–ª—è–π —Ñ–∞–π–ª—ã –ø–æ –æ–¥–Ω–æ–º—É.\n"
        f"–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å, –Ω–∞–ø–∏—à–∏ <code>end</code>."
    )
    await state.set_state(UploadStates.receiving_files)


# --- –ü—Ä–∏—ë–º —Ñ–∞–π–ª–æ–≤ ---
@dp.message(UploadStates.receiving_files, F.document)
async def receive_document(message: Message, state: FSMContext):
    data = await state.get_data()
    folder = data["folder"]
    document = message.document
    file = await bot.get_file(document.file_id)
    dest_path = os.path.join(folder, document.file_name)
    await bot.download_file(file.file_path, destination=dest_path)
    await message.reply(f"–°–æ—Ö—Ä–∞–Ω—ë–Ω: {hcode(dest_path)}")


# --- –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ ---
@dp.message(UploadStates.receiving_files, F.text.lower() == "end")
async def finish_upload(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ.")


# --- –°—Ç–∞—Ä—Ç –±–æ—Ç–∞ ---
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
