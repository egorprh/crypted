import json
from logger import logger
import asyncio
import os
import random
import sys
from pathlib import Path
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, CommandObject, Command
from aiogram.enums import ParseMode, ChatAction
from aiogram.types import Message, CallbackQuery, ChatJoinRequest, FSInputFile, KeyboardButton, ReplyKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
from spam_protection import AntiSpamMiddleware
from datetime import datetime
from aiogram.utils.markdown import hcode

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ PGAPI
backend_path = Path(__file__).parent.parent / "backend"
sys.path.insert(0, str(backend_path))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º PGAPI
from db.pgapi import PGApi

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
from learn_notify import notification_worker, resolve_message_text

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env ===
# –í unified —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º backend/.env, –∏–Ω–∞—á–µ telegram_bot/.env
unified_mode = os.getenv('UNIFIED_MODE', 'false').lower() == 'true'
if unified_mode:
    load_dotenv(Path(__file__).parent.parent / "backend" / ".env")
else:
    load_dotenv('.env')

TOKEN = os.getenv("BOT_TOKEN")
PRIVATE_CHANNEL_ID = os.getenv("PRIVATE_CHANNEL_ID")
ADMINS = os.getenv("ADMINS")

if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º PGAPI
db = PGApi()

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º
def get_telegram_bot_file_path(relative_path):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ –∑–∞–ø—É—Å–∫–∞.
    
    Args:
        relative_path: –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, "files/welcome.png")
    
    Returns:
        Path: –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω—ã –ª–∏ –º—ã –≤ unified —Ä–µ–∂–∏–º–µ
    unified_mode = os.getenv('UNIFIED_MODE', 'false').lower() == 'true'
    
    if unified_mode:
        # –í unified —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –æ—Ç —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è bot.py
        return Path(__file__).parent / relative_path
    else:
        # –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –æ—Ç —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        return Path(relative_path)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ –∑–∞–ø—É—Å–∫–∞
def get_random_messages_path():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É random_messages.json"""
    return get_telegram_bot_file_path("files/random_messages.json")

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
try:
    messages_path = get_random_messages_path()
    with open(messages_path, encoding="utf-8") as f:
        fallback_replies = json.load(f)
except Exception:
    fallback_replies = ["–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ."]


async def send_service_message(bot: Bot, text: str):
    await bot.send_message(PRIVATE_CHANNEL_ID, text)


async def welcome_user(user_id):
    # 1. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
    photo_path = FSInputFile(str(get_telegram_bot_file_path("files/welcome.png")))
    welcome_message = """
        <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ D-space.</b>

–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –æ–±—É—á–∞—é—â–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –æ—Ç —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã dept. –ó–¥–µ—Å—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –∫—É—Ä—Å—ã –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –≤–º–µ—Å—Ç–µ —Å –Ω–∞–º–∏. 

<b>–î–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:</b>
        """
    # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–µ–±‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ –∫ –±–æ—Ç—É
    kb = InlineKeyboardBuilder()
    kb.button(text="–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", url="https://t.me/dept_mainbot/dspace")
    kb.adjust(1)

    await bot.send_photo(user_id, photo_path, caption=welcome_message, reply_markup=kb.as_markup())


# === –°—Ç–∞—Ä—Ç ===
@dp.message(F.chat.type == "private", CommandStart())
async def start_handler(message: Message, state: FSMContext, command: CommandObject):
    logger.info(f"{message.from_user.full_name} –Ω–∞–∂–∞–ª start")
    user = message.from_user
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–ø–ª–∏–Ω–∫–æ–≤ (/start <payload>)
    if command and command.args:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –¥–∏–ø–ª–∏–Ω–∫ payload: {command.args}")
    await welcome_user(user.id)
    await send_service_message(bot, f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} {user.first_name} {user.last_name} –Ω–∞–∂–∞–ª /start –≤ –±–æ—Ç–µ")


# === –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ===
@dp.message(F.chat.type == "private", Command("notifications_stats"))
async def notifications_stats_handler(message: Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    –î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID 342799025.
    """
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id != 342799025:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        stats = await db.get_records_sql("""
            SELECT 
                status,
                COUNT(*) as count,
                MIN(time_created) as first_created,
                MAX(time_created) as last_created
            FROM notifications 
            GROUP BY status
            ORDER BY status
        """)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_stats = await db.get_records_sql("""
            SELECT 
                COUNT(*) as total,
                COUNT(CASE WHEN status = 'pending' THEN 1 END) as pending,
                COUNT(CASE WHEN status = 'sent' THEN 1 END) as sent,
                COUNT(CASE WHEN status = 'failed' THEN 1 END) as failed,
                COUNT(CASE WHEN status = 'cancelled' THEN 1 END) as cancelled,
                COUNT(CASE WHEN scheduled_at <= NOW() AT TIME ZONE 'UTC' AND status = 'pending' THEN 1 END) as ready_to_send
            FROM notifications
        """)
        
        if not total_stats:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
            return
        
        total = total_stats[0]
        
        response = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
        response += f"üìà <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        response += f"‚Ä¢ –í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: <code>{total['total']}</code>\n"
        response += f"‚Ä¢ –û–∂–∏–¥–∞—é—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: <code>{total['pending']}</code>\n"
        response += f"‚Ä¢ –ì–æ—Ç–æ–≤—ã –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ: <code>{total['ready_to_send']}</code>\n"
        response += f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: <code>{total['sent']}</code>\n"
        response += f"‚Ä¢ –û—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏: <code>{total['failed']}</code>\n"
        response += f"‚Ä¢ –û—Ç–º–µ–Ω–µ–Ω—ã: <code>{total['cancelled']}</code>\n\n"
        
        if stats:
            response += f"üìã <b>–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:</b>\n"
            for stat in stats:
                status_emoji = {
                    'pending': '‚è≥',
                    'sent': '‚úÖ',
                    'failed': '‚ùå',
                    'cancelled': 'üö´'
                }.get(stat['status'], '‚ùì')
                
                response += f"{status_emoji} <b>{stat['status']}</b>: <code>{stat['count']}</code>\n"
        
        response += f"\nüïê <b>–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
        
        await message.answer(response)
        
    except Exception as e:
        error_msg = f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:</b>\n<code>{str(e)}</code>"
        await message.answer(error_msg)


@dp.message(F.chat.type == "private")
async def fallback_handler(message: Message):
    reply = random.choice(fallback_replies)
    logger.info(f"–ó–∞–≥–ª—É—à–∫–∞: {message.from_user.full_name} –Ω–∞–ø–∏—Å–∞–ª: {message.text}")
    await message.answer(reply)


# === –ó–∞–ø—É—Å–∫ ===
async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    try:
        await db.create()
        logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ –ë–î
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ —Å —Å—Ç–∞—Ç—É—Å–æ–º –ë–î
    db_status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞" if db else "‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞"
    startup_message = f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω\nüìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_status}"
    await bot.send_message(ADMINS, text=startup_message)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º
    dp.message.middleware(AntiSpamMiddleware(bot))
    dp.callback_query.middleware(AntiSpamMiddleware(bot))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–æ–Ω–µ
    notification_task = asyncio.create_task(notification_worker(bot, db))
    logger.info("–í–æ—Ä–∫–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")

    try:
        await dp.start_polling(bot, drop_pending_updates=True)
    finally:
        # === –û–ß–ò–°–¢–ö–ê –†–ï–°–£–†–°–û–í ===
        # –≠—Ç–æ—Ç –±–ª–æ–∫ –í–°–ï–ì–î–ê –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –±–æ—Ç–∞ (–Ω–æ—Ä–º–∞–ª—å–Ω–æ–º –∏–ª–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ)
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        try:
            # 1. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Ä–∫–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            # cancel() –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, await –∂–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            notification_task.cancel()
            await notification_task
            logger.info("–í–æ—Ä–∫–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            # 2. –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ë–î
            # –ü–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω: —Å–Ω–∞—á–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –ø–æ—Ç–æ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –ë–î
            await bot.send_message(ADMINS, text="ü§ñ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            await db.close()
            logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–∫—Ä—ã—Ç–æ")
        except asyncio.CancelledError:
            # CancelledError - —ç—Ç–æ –ù–û–†–ú–ê–õ–¨–ù–û–ï –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–¥–∞—á–∏
            # –ù–µ —è–≤–ª—è–µ—Ç—Å—è –æ—à–∏–±–∫–æ–π, –ø—Ä–æ—Å—Ç–æ –≤–æ—Ä–∫–µ—Ä –ø–æ–ª—É—á–∏–ª —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            logger.info("–í–æ—Ä–∫–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            # –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ (–ø—Ä–æ–±–ª–µ–º—ã —Å Telegram API, –ë–î –∏ —Ç.–¥.)
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")


if __name__ == "__main__":
    asyncio.run(main())
