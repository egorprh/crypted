"""
–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (—Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤)
"""

import pytest
import sys
import os
from unittest.mock import AsyncMock, MagicMock, patch

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'backend'))

from misc import send_homework_notification


class TestSendHomeworkNotification:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ send_homework_notification."""
    
    @pytest.fixture
    def mock_db(self):
        """–ú–æ–∫ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        db = MagicMock()
        db.get_records_sql = AsyncMock()
        return db
    
    @pytest.fixture
    def mock_user(self):
        """–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        return {
            'id': 123,
            'name': '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
            'username': 'ivan_petrov',
            'telegram_id': 456789
        }
    
    @pytest.fixture
    def mock_answers(self):
        """–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        return [
            {
                'questionId': 1,
                'answerId': 5,
                'answerText': None
            },
            {
                'questionId': 2,
                'answerText': '–ú–æ–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 2 –≥–æ–¥–∞',
                'answerId': None
            },
            {
                'questionId': 3,
                'answerId': 8,
                'answerText': None
            }
        ]
    
    @pytest.fixture
    def mock_course_info(self):
        """–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–µ."""
        return [{'title': '–û—Å–Ω–æ–≤—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç'}]
    
    @pytest.fixture
    def mock_lesson_info(self):
        """–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–± —É—Ä–æ–∫–µ."""
        return [{'title': '–£—Ä–æ–∫ 2: –ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å –±–∏—Ä–∂—É –∏ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á—ë—Ç?'}]
    
    @pytest.fixture
    def mock_question_texts(self):
        """–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤."""
        return {
            1: '–ö–∞–∫–∞—è –±–∏—Ä–∂–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Å–∞–º–æ–π –Ω–∞–¥–µ–∂–Ω–æ–π?',
            2: '–û–ø–∏—à–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏',
            3: '–ö–∞–∫–æ–π —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞ —Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π?'
        }
    
    @pytest.fixture
    def mock_answer_texts(self):
        """–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤."""
        return {
            5: 'Binance',
            8: '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞'
        }
    
    @patch('notification_service.send_service_message')
    @pytest.mark.asyncio
    async def test_send_homework_notification_success(
        self, 
        mock_send_service, 
        mock_db, 
        mock_user, 
        mock_answers,
        mock_course_info,
        mock_lesson_info,
        mock_question_texts,
        mock_answer_texts
    ):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è."""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        mock_db.get_records_sql.side_effect = [
            mock_course_info,  # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–µ
            mock_lesson_info,  # –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Ä–æ–∫–µ
            [{'text': mock_question_texts[1]}],  # –¢—Ä–µ—Ç–∏–π –≤—ã–∑–æ–≤ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ 1
            [{'text': mock_question_texts[2]}],  # –ß–µ—Ç–≤–µ—Ä—Ç—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ 2
            [{'text': mock_question_texts[3]}],  # –ü—è—Ç—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ 3
            [{'text': mock_answer_texts[5]}],    # –®–µ—Å—Ç–æ–π –≤—ã–∑–æ–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ 5
            [{'text': mock_answer_texts[8]}]     # –°–µ–¥—å–º–æ–π –≤—ã–∑–æ–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ 8
        ]
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
        await send_homework_notification(
            user=mock_user,
            quiz_id=2,
            course_id=1,
            answers=mock_answers,
            db=mock_db
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è send_service_message –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞
        mock_send_service.assert_called_once()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        sent_message = mock_send_service.call_args[0][0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–æ–±—â–µ–Ω–∏—è
        assert 'üìö –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @ivan_petrov –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ –≤ –∫—É—Ä—Å–µ "–û—Å–Ω–æ–≤—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"' in sent_message
        assert '–£—Ä–æ–∫: –£—Ä–æ–∫ 2: –ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å –±–∏—Ä–∂—É –∏ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á—ë—Ç?' in sent_message
        assert '‚úçÔ∏è –û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:' in sent_message
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
        assert '1. –ö–∞–∫–∞—è –±–∏—Ä–∂–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Å–∞–º–æ–π –Ω–∞–¥–µ–∂–Ω–æ–π?' in sent_message
        assert '–û—Ç–≤–µ—Ç: Binance' in sent_message
        
        assert '2. –û–ø–∏—à–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏' in sent_message
        assert '–û—Ç–≤–µ—Ç: –ú–æ–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 2 –≥–æ–¥–∞' in sent_message
        
        assert '3. –ö–∞–∫–æ–π —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞ —Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π?' in sent_message
        assert '–û—Ç–≤–µ—Ç: –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞' in sent_message
    
    @pytest.mark.asyncio
    async def test_send_homework_notification_only_text_answers(
        self, 
        mock_db, 
        mock_user,
        mock_course_info,
        mock_lesson_info
    ):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏."""
        # –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã
        text_only_answers = [
            {
                'questionId': 1,
                'answerText': '–ú–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å',
                'answerId': None
            },
            {
                'questionId': 2,
                'answerText': '–ú–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å',
                'answerId': None
            }
        ]
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        mock_db.get_records_sql.side_effect = [
            mock_course_info,
            mock_lesson_info,
            [{'text': '–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å'}],
            [{'text': '–í—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å'}]
        ]
        
        with patch('notification_service.send_service_message') as mock_send_service:
            await send_homework_notification(
                user=mock_user,
                quiz_id=3,
                course_id=1,
                answers=text_only_answers,
                db=mock_db
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            mock_send_service.assert_called_once()
            
            sent_message = mock_send_service.call_args[0][0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è
            assert '1. –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å' in sent_message
            assert '–û—Ç–≤–µ—Ç: –ú–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å' in sent_message
            assert '2. –í—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å' in sent_message
            assert '–û—Ç–≤–µ—Ç: –ú–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å' in sent_message
    
    @pytest.mark.asyncio
    async def test_send_homework_notification_only_quiz_answers(
        self, 
        mock_db, 
        mock_user,
        mock_course_info,
        mock_lesson_info
    ):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏."""
        # –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã
        quiz_only_answers = [
            {
                'questionId': 1,
                'answerId': 5,
                'answerText': None
            },
            {
                'questionId': 2,
                'answerId': 8,
                'answerText': None
            }
        ]
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        mock_db.get_records_sql.side_effect = [
            mock_course_info,
            mock_lesson_info,
            [{'text': '–ü–µ—Ä–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å'}],
            [{'text': '–í—Ç–æ—Ä–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å'}],
            [{'text': '–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ 5'}],
            [{'text': '–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ 8'}]
        ]
        
        with patch('notification_service.send_service_message') as mock_send_service:
            await send_homework_notification(
                user=mock_user,
                quiz_id=1,
                course_id=1,
                answers=quiz_only_answers,
                db=mock_db
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            mock_send_service.assert_called_once()
            
            sent_message = mock_send_service.call_args[0][0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è
            assert '1. –ü–µ—Ä–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å' in sent_message
            assert '–û—Ç–≤–µ—Ç: –í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ 5' in sent_message
            assert '2. –í—Ç–æ—Ä–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å' in sent_message
            assert '–û—Ç–≤–µ—Ç: –í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ 8' in sent_message
    
    @pytest.mark.asyncio
    async def test_send_homework_notification_mixed_answers(
        self, 
        mock_db, 
        mock_user,
        mock_course_info,
        mock_lesson_info
    ):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ —Å–º–µ—à–∞–Ω–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤."""
        # –°–º–µ—à–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        mixed_answers = [
            {
                'questionId': 1,
                'answerId': 5,
                'answerText': None
            },
            {
                'questionId': 2,
                'answerText': '–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                'answerId': None
            }
        ]
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        mock_db.get_records_sql.side_effect = [
            mock_course_info,
            mock_lesson_info,
            [{'text': '–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å'}],
            [{'text': '–¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å'}],
            [{'text': '–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ 5'}]
        ]
        
        with patch('misc.send_service_message') as mock_send_service:
            await send_homework_notification(
                user=mock_user,
                quiz_id=4,
                course_id=1,
                answers=mixed_answers,
                db=mock_db
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            mock_send_service.assert_called_once()
            
            sent_message = mock_send_service.call_args[0][0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–∞ —Ç–∏–ø–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è
            assert '1. –¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å' in sent_message
            assert '–û—Ç–≤–µ—Ç: –í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ 5' in sent_message
            assert '2. –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å' in sent_message
            assert '–û—Ç–≤–µ—Ç: –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' in sent_message
    
    @pytest.mark.asyncio
    async def test_send_homework_notification_user_without_username(
        self, 
        mock_db, 
        mock_user,
        mock_course_info,
        mock_lesson_info
    ):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ username."""
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ username
        user_without_username = {
            'id': 123,
            'name': '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
            'telegram_id': 456789
            # username –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        }
        
        simple_answers = [
            {
                'questionId': 1,
                'answerText': '–ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç',
                'answerId': None
            }
        ]
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        mock_db.get_records_sql.side_effect = [
            mock_course_info,
            mock_lesson_info,
            [{'text': '–ü—Ä–æ—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å'}]
        ]
        
        with patch('notification_service.send_service_message') as mock_send_service:
            await send_homework_notification(
                user=user_without_username,
                quiz_id=5,
                course_id=1,
                answers=simple_answers,
                db=mock_db
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            mock_send_service.assert_called_once()
            
            sent_message = mock_send_service.call_args[0][0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–º–µ—Å—Ç–æ username
            assert 'üìö –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @123 –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ' in sent_message
    
    @pytest.mark.asyncio
    async def test_send_homework_notification_course_info_not_found(
        self, 
        mock_db, 
        mock_user, 
        mock_answers
    ):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."""
        # –ú–æ–∫ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∫—É—Ä—Å–∞
        mock_db.get_records_sql.return_value = []
        
        with patch('notification_service.send_service_message') as mock_send_service:
            await send_homework_notification(
                user=mock_user,
                quiz_id=999,
                course_id=999,
                answers=mock_answers,
                db=mock_db
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            mock_send_service.assert_not_called()
    
    @pytest.mark.asyncio
    async def test_send_homework_notification_lesson_info_not_found(
        self, 
        mock_db, 
        mock_user, 
        mock_answers,
        mock_course_info
    ):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–æ–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."""
        # –ú–æ–∫ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ, –Ω–æ –Ω–µ –æ–± —É—Ä–æ–∫–µ
        mock_db.get_records_sql.side_effect = [
            mock_course_info,  # –ö—É—Ä—Å –Ω–∞–π–¥–µ–Ω
            []                  # –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω
        ]
        
        with patch('notification_service.send_service_message') as mock_send_service:
            await send_homework_notification(
                user=mock_user,
                quiz_id=999,
                course_id=1,
                answers=mock_answers,
                db=mock_db
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            mock_send_service.assert_not_called()
    
    @pytest.mark.asyncio
    async def test_send_homework_notification_question_text_not_found(
        self, 
        mock_db, 
        mock_user,
        mock_course_info,
        mock_lesson_info
    ):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω."""
        simple_answers = [
            {
                'questionId': 999,
                'answerText': '–û—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å',
                'answerId': None
            }
        ]
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        mock_db.get_records_sql.side_effect = [
            mock_course_info,
            mock_lesson_info,
            []  # –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω
        ]
        
        with patch('notification_service.send_service_message') as mock_send_service:
            await send_homework_notification(
                user=mock_user,
                quiz_id=6,
                course_id=1,
                answers=simple_answers,
                db=mock_db
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            mock_send_service.assert_called_once()
            
            sent_message = mock_send_service.call_args[0][0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            assert '1. –í–æ–ø—Ä–æ—Å 999' in sent_message
            assert '–û—Ç–≤–µ—Ç: –û—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å' in sent_message
    
    @pytest.mark.asyncio
    async def test_send_homework_notification_answer_text_not_found(
        self, 
        mock_db, 
        mock_user,
        mock_course_info,
        mock_lesson_info
    ):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —Ç–µ–∫—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω."""
        quiz_answers = [
            {
                'questionId': 1,
                'answerId': 999,
                'answerText': None
            }
        ]
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        mock_db.get_records_sql.side_effect = [
            mock_course_info,
            mock_lesson_info,
            [{'text': '–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å'}],
            []  # –¢–µ–∫—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω
        ]
        
        with patch('misc.send_service_message') as mock_send_service:
            await send_homework_notification(
                user=mock_user,
                quiz_id=7,
                course_id=1,
                answers=quiz_answers,
                db=mock_db
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            mock_send_service.assert_called_once()
            
            sent_message = mock_send_service.call_args[0][0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–ø—Ä–æ—Å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è, –Ω–æ –æ—Ç–≤–µ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º
            assert '1. –¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å' in sent_message
            # –û—Ç–≤–µ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–ª—É—à–∫—É
    
    @patch('misc.send_service_message')
    @pytest.mark.asyncio
    async def test_send_homework_notification_emoji_formatting(
        self, 
        mock_send_service, 
        mock_db, 
        mock_user, 
        mock_answers,
        mock_course_info,
        mock_lesson_info,
        mock_question_texts,
        mock_answer_texts
    ):
        """–¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏."""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        mock_db.get_records_sql.side_effect = [
            mock_course_info,
            mock_lesson_info,
            [{'text': mock_question_texts[1]}],
            [{'text': mock_question_texts[2]}],
            [{'text': mock_question_texts[3]}],
            [{'text': mock_answer_texts[5]}],
            [{'text': mock_answer_texts[8]}]
        ]
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
        await send_homework_notification(
            user=mock_user,
            quiz_id=2,
            course_id=1,
            answers=mock_answers,
            db=mock_db
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        sent_message = mock_send_service.call_args[0][0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —ç–º–æ–¥–∑–∏
        assert 'üìö' in sent_message  # –≠–º–æ–¥–∑–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        assert '‚úçÔ∏è' in sent_message  # –≠–º–æ–¥–∑–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–º–æ–¥–∑–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
        lines = sent_message.split('\n')
        assert lines[0].startswith('üìö')  # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —ç–º–æ–¥–∑–∏
        assert '‚úçÔ∏è –û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:' in lines[2]  # –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–º–æ–¥–∑–∏ –æ—Ç–≤–µ—Ç–æ–≤


if __name__ == '__main__':
    pytest.main([__file__, '-v'])
